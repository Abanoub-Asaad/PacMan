#include <SFML/Graphics.hpp>
#include<iostream>
#include <stdio.h>
#include <fstream>
#include <stdlib.h>
#include <ctime>
#include <math.h>

using namespace std;
using namespace sf;

Texture ghosttexture;

Sprite oli;


int ghostx(int pos, Sprite &oli)
{
	return (oli.getPosition().y + pos) / 32;
}

int ghosty(int pos, Sprite &oli)
{
	return (oli.getPosition().x + pos) / 32;
}


int main()
{
	int const rows = 28;

	int const cols = 28;

	int map1[50][50];

	fstream inputStream;

	int cnt = 0;


	inputStream.open("map4.txt");
	for (int i = 0; i < rows; i++)
		for (int j = 0; j < cols; j++)
			inputStream >> map1[i][j];

	RenderWindow window(sf::VideoMode(900, 900), "SFML works ", Style::Close || Style::Resize);

	srand(time(NULL));


	Texture playertexture;

	Sprite pac;

	if (!playertexture.loadFromFile("pac.png"))
	{
		cout << "Error" << endl;
	}

	//Rect<float> sizepac = pac.getLocalBounds();

	pac.setTexture(playertexture);

	pac.setPosition(Vector2f(290, 200));

	pac.setColor(Color(255, 255, 255));


	if (!ghosttexture.loadFromFile("ghost.png"))
	{
		cout << "Error" << endl;
	}

	oli.setTexture(ghosttexture);

	oli.setPosition(Vector2f(32, 32));

	oli.setColor(Color(255, 255, 0));


	Texture walltexture;

	Sprite walls;


	if (!walltexture.loadFromFile("wall.png"))
	{
		cout << "Error" << endl;
	}

	walls.setTexture(walltexture);

	walls.setTextureRect(IntRect(0,0,448, 448));

	int olix = 0, oliy = 32;

	window.setFramerateLimit(10);

	bool haha = 1;

	while (window.isOpen())
	{
		Event eve;

		cnt++;
		cnt %= 1000000000 + 7;

		int pacx = (pac.getPosition().x) / 32;
		int pacy = (pac.getPosition().y) / 32;
		/*
		 olix = (oli.getPosition().x) / 32;
		 oliy = (oli.getPosition().y) / 32;*/

		//int xplus = 0; int yplus = 0;
		
		/*if (olix > 0)
			xplus = 32 ;
		else if (olix < 0)
			xplus = -32;
		else
			xplus = 0;

		if (oliy > 0)
			yplus = 32;
		else if (oliy < 0)
			yplus = -32;
		else
			yplus = 0;*/

	
		int x = ghostx(oliy , oli);
		int y = ghosty(olix , oli);


		while (window.pollEvent(eve))
		{
			switch (eve.type)
			{

			case Event::Closed:
				window.close();
				break;
			default:
				break;

			}
		}

		window.clear();

		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{

				if (map1[j][i] == 1)
				{
					walls.setTextureRect(IntRect(0, 0, 32, 32));

					walls.setPosition(i * 32, j * 32);

					window.draw(walls);
				}
				else
					continue;
			}
		}

		
		int diffrence;

		diffrence = (olix - pacx) + (oliy - pacy);

		diffrence = abs(diffrence);
		
		//if ( diffrence <= 8){

			if (map1[x][y] == 1 || cnt % 25 == 0)
			{
				//dirghostrand = rand() % 4 + 1;


				if ((olix > 0 || olix < 0) && oliy == 0) //right and left
				{
					if (haha)
					{
						if (map1[ghostx(-32, oli)][ghosty(0, oli)] != 1) //up
							olix = 0, oliy = -32;

						else if (map1[ghostx(32, oli)][ghosty(0, oli)] != 1) // down
							olix = 0, oliy = 32;

						else if (map1[ghostx(0, oli)][ghosty(32, oli)] != 1) //right
							olix = 32, oliy = 0;

						else if (map1[ghostx(0, oli)][ghosty(-32, oli)] != 1) //left
							olix = -32, oliy = 0;

					}
					else
					{
						if (map1[ghostx(32, oli)][ghosty(0, oli)] != 1) // down
							olix = 0, oliy = 32;

						else if (map1[ghostx(-32, oli)][ghosty(0, oli)] != 1) //up
							olix = 0, oliy = -32;

						else if (map1[ghostx(0, oli)][ghosty(32, oli)] != 1) //right
							olix = 32, oliy = 0;

						else if (map1[ghostx(0, oli)][ghosty(-32, oli)] != 1) //left
							olix = -32, oliy = 0;

					}
				}
				else if ((oliy > 0 || oliy < 0) && olix == 0)  // up and down	
				{
					if (haha)

					{
						if (map1[ghostx(0, oli)][ghosty(32, oli)] != 1) //right
							olix = 32, oliy = 0;

						else if (map1[ghostx(0, oli)][ghosty(-32, oli)] != 1) //left
							olix = -32, oliy = 0;

						else if (map1[ghostx(-32, oli)][ghosty(0, oli)] != 1) //up
							olix = 0, oliy = -32;

						else if (map1[ghostx(32, oli)][ghosty(0, oli)] != 1) // down
							olix = 0, oliy = 32;

					}
					else
					{

						if (map1[ghostx(0, oli)][ghosty(-32, oli)] != 1) //left
							olix = -32, oliy = 0;

						else if (map1[ghostx(0, oli)][ghosty(32, oli)] != 1) //right
							olix = 32, oliy = 0;

						else if (map1[ghostx(-32, oli)][ghosty(0, oli)] != 1) //up
							olix = 0, oliy = -32;

						else if (map1[ghostx(32, oli)][ghosty(0, oli)] != 1) // down
							olix = 0, oliy = 32;
					}

				}

				haha = (haha) ? 0 : 1;

			}
			oli.move(olix, oliy);
		
		/*else
		{

		}
		*/

			//window.clear();
			window.draw(oli);
			window.draw(pac);
			window.display();


	}
	system("pause");
	return 0;
}

